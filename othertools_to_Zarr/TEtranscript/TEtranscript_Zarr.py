import pandas as pd
import zarr
import json
import numpy as np
import argparse


def read_wigfile_bysubfamily(filename):
    subfam_data = []
    subfam_name = ''
    data = {}
    with open(filename) as file:
        for line in file:
            line_data = np.array(line.replace('\n', '').split(' '))
            if len(line_data) > 2:
                subfam_name = line_data[1].split('=')[1]
                data[subfam_name] = []
            else:
                data[subfam_name].append(int(line_data[0]))

    max_len = max(list(map(len, data.values())))
    for key in data:
        d = np.array(data[key], dtype='i4')
        a = np.pad(d, (0, max_len - len(d)), 'constant', constant_values=(0, -1))
        subfam_data.append(a)

    return list(data.keys()), np.array(subfam_data)


def read_json(file_path):
    # Open the JSON file
    with open(file_path, 'r') as json_file:
        # Load the JSON data into a dictionary
        data_dict = json.load(json_file)

        # Print or process the loaded dictionary
        print(data_dict)
    return data_dict


def generate_Zarr(parameters, TEanalysis="./sample_files/heatmap.csv",
                  local_path='./sample.zarr'):

    TE_df = pd.read_csv(TEanalysis, sep='\t')

    root = zarr.open(local_path, mode='w')

    heatmap_names = np.concatenate((['#subfamily'], TE_df.index))
    heatmap_all_value = np.concatenate((['all_value'], TE_df['log2FoldChange'].values))
    heatmap_uni_value = np.concatenate((['uni_value'], TE_df['log2FoldChange'].values))
    subfam_data = np.transpose(np.column_stack(((TE_df['log2FoldChange'].values, TE_df['log2FoldChange'].values))))
    stat_subfamily = np.stack((heatmap_names, heatmap_all_value, heatmap_uni_value), axis=0)
    subfam_stat = root.create_dataset('subfam_stat', data=subfam_data, compressor=zarr.Zlib(level=1),
                                      chunks=(1, stat_subfamily.shape[1]))

    if parameters['id'] == 'unknown':
        parameters['id'] = TEanalysis.split('/')[-1].split('.')[0].split('_')[0]
    root.attrs['Parameters'] = parameters

    zarr.consolidate_metadata(local_path)

    return 0



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Process the SQuIRE output files to the .Zarr format.')

    parser.add_argument('--Biosample', '-b', default='unknown', type=str, help="The biosample type of your input file.")
    parser.add_argument('--Tissue', '-t', default='unknown', type=str, help="The tissue type of your input file.")
    parser.add_argument('--Assay', '-a', default='unknown', type=str, help="The assay type of your input file.")
    parser.add_argument('--Control', '-c', default='unknown', type=str, help="The control id of your input file.")
    parser.add_argument('--Organism', default='unknown', type=str, help="The organism of your input file.")
    parser.add_argument('--id', default='unknown', type=str, help="The file id (accession) of your input file.")

    parser.add_argument('--TEanalysis',
                        default="./sample_transcript_nosort_test_gene_TE_analysis.txt",
                        type=str, help="The file path of TE_analysis txt file generated by TEtranscript.")
    parser.add_argument('--output', '-o', default='./example.zarr', type=str,
                        help="The local path of output files, which must end with *.zarr")


    args = parser.parse_args()
    parameters = {"Biosample": args.Biosample, "Assay": args.Assay, "Control": args.Control, "Organism": args.Organism,
                  "id": args.id, "Tissue": args.Tissue}

    generate_Zarr(parameters, TEanalysis=args.TEanalysis, local_path=args.output)
